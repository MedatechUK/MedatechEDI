Imports System.ComponentModel
Imports System.ComponentModel.Composition
Imports MedatechUK.Deserialiser

<Export(GetType(ILexor))>
<ExportMetadata("LexName", "ftp.config")>
<ExportMetadata("LexVers", "1.0")>
<ExportMetadata("Parser", eParser.xml)>
<ExportMetadata("SerialType", GetType(ftpconfig))>
<ExportMetadata("LoadType", "FTP")>
Public Class ftpconfigLexor
    Inherits Lexor
    Implements ILexor

End Class

#Region "Enumerations"

Public Enum eProtocol
    sftp = 0
    scp = 1
    ftp = 2
    webdav = 3
    s3 = 4
    tls = 5

End Enum

Public Enum eActType
    send
    receive

End Enum

#End Region

'
'This source code was auto-generated by xsd, Version=2.0.50727.1432.
'
'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True),
 System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=False)>
Partial Public Class ftpconfig
    Implements IDisposable

    Private modeField As New List(Of ftpconfigMode)

    Private serverField As New List(Of ftpconfigServer)

    Private mode1Field As String

#Region "CTOR"

    Sub New(DefaultMode As String)
        mode1Field = DefaultMode

    End Sub

    Sub New()

    End Sub

#End Region

    '''<remarks/>
    <Browsable(False)>
    <System.Xml.Serialization.XmlElementAttribute("mode")>
    Public Property mode As List(Of ftpconfigMode)
        Get
            Return Me.modeField
        End Get
        Set
            Me.modeField = Value
        End Set
    End Property

    '''<remarks/>
    <Browsable(False)>
    <System.Xml.Serialization.XmlElementAttribute("server")>
    Public Property server As List(Of ftpconfigServer)
        Get
            Return Me.serverField
        End Get
        Set
            Me.serverField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Default Mode"),
    Description("The mode that will be used if not specified by the -m parameter."),
    Category("Defaults"),
    TypeConverter(GetType(ModeList))>
    <System.Xml.Serialization.XmlAttributeAttribute("mode")>
    Public Property defaultmode() As String
        Get
            Return Me.mode1Field
        End Get
        Set
            Me.mode1Field = Value
        End Set
    End Property

#Region "IDisposable Support"

    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        Dispose(True)
        ' TODO: uncomment the following line if Finalize() is overridden above.
        ' GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
Partial Public Class ftpconfigMode

    Private actField As New List(Of ftpconfigModeAct)

    Private nameField As String

    Private serverField As String

    Sub New(Name As String, ByRef Server As ftpconfigServer)
        nameField = Name
        serverField = Server.name

    End Sub

    Sub New(Name As String, ByRef Server As String)
        nameField = Name
        serverField = Server

    End Sub

    Sub New()

    End Sub

    '''<remarks/>
    <Browsable(False)>
    <System.Xml.Serialization.XmlElementAttribute("receive", GetType(ftpconfigModeReceive)),
     System.Xml.Serialization.XmlElementAttribute("send", GetType(ftpconfigModeSend))>
    Public Property Act() As List(Of ftpconfigModeAct)
        Get
            Return Me.actField
        End Get
        Set
            Me.actField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Mode Name"),
    Description("A mode is a collection of send/receive actions. Mode can be specified by running the ediftp.exe with the -m {mode} parameter."),
    Category("Mode"),
    [ReadOnly](True)>
    <System.Xml.Serialization.XmlAttributeAttribute()>
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Server"),
    Description("The server to run this action against."),
    Category("Mode"),
    TypeConverter(GetType(ServerList))>
    <System.Xml.Serialization.XmlAttributeAttribute()>
    Public Property server() As String
        Get
            Return serverField
        End Get
        Set
            serverField = Value
        End Set
    End Property

End Class

<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
Partial Public MustInherit Class ftpconfigModeAct
    Implements IDisposable

    Private dirField As String

    Private filespecField As String

    Private remotedirField As String

    <DisplayName("Action Type"),
    Description("Send or receive Action."),
    Category("Action"),
    [ReadOnly](True)>
    Public MustOverride ReadOnly Property actType As eActType
    Public MustOverride ReadOnly Property Description As String

#Region "CTOR"
    Sub New(filespec As String, remotedir As String)
        With Me
            .filespec = filespec
            .remotedir = remotedir

        End With
    End Sub

    Sub New()

    End Sub

#End Region

    '''<remarks/>
    <DisplayName("Directory"),
    Description("The local directory for the action, relative to the current working directory."),
    Category("Action"),
    Editor(GetType(FolderBrowse), GetType(System.Drawing.Design.UITypeEditor))>
    Public Property dir() As String
        Get
            Return Me.dirField
        End Get
        Set
            Me.dirField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("File type"),
    Description("The type of file to process, e.g. *.xml"),
    Category("Action")>
    Public Property filespec() As String
        Get
            Return Me.filespecField
        End Get
        Set
            Me.filespecField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Remote Directory"),
    Description("The directory for the action on the remote file server."),
    Category("Action")>
    Public Property remotedir() As String
        Get
            Return Me.remotedirField
        End Get
        Set
            Me.remotedirField = Value
        End Set
    End Property

#Region "IDisposable Support"

    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        Dispose(True)
        ' TODO: uncomment the following line if Finalize() is overridden above.
        ' GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
Partial Public Class ftpconfigModeReceive
    Inherits ftpconfigModeAct

    Private deleteField As Boolean

    Private binField As String

    Private environmentField As String

    Public Overrides ReadOnly Property actType As eActType
        Get
            Return eActType.receive
        End Get
    End Property

#Region "CTOR"

    Sub New(Dir As String)
        MyBase.New("*.xml", "/remote/directory")
        With Me
            .dir = Dir
            .delete = False
            .environment = "demo"

        End With

    End Sub

    Sub New()

    End Sub

#End Region

    '''<remarks/>
    <DisplayName("Delete"),
    Description("Delete downloaded files from the remote file server."),
    Category("Receive")>
    Public Property delete() As Boolean
        Get
            Return Me.deleteField
        End Get
        Set
            Me.deleteField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Binary"),
    Description("The batch (.bat), executable (.exe) or Lexor class that handles downloaded files. For .bat/.exe binary the downloaded filename is passed as %1 (1st parameter)."),
    Category("Receive"),
    Editor(GetType(BinSelEdit), GetType(System.Drawing.Design.UITypeEditor))>
    Public Property bin() As String
        Get
            Return Me.binField
        End Get
        Set
            Me.binField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Environment"),
    Description("The Priority environment that downloaded files will to loaded to. For .bat/.exe binary this is passed as %2 (2nd parameter)."),
    Category("Receive")>
    Public Property environment() As String
        Get
            Return Me.environmentField
        End Get
        Set
            Me.environmentField = Value
        End Set
    End Property

    <Browsable(False)>
    Public Overrides ReadOnly Property Description As String
        Get
            Return String.Format("GET {0}/{1}", Me.remotedir, Me.filespec)
        End Get
    End Property

    Public isLexor As Boolean

End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
Partial Public Class ftpconfigModeSend
    Inherits ftpconfigModeAct

#Region "CTOR"

    Sub New(Dir As String)
        MyBase.New("*.xml", "/remote/directory")
        With Me
            .dir = Dir

        End With

    End Sub

    Sub New()

    End Sub

#End Region

    Public Overrides ReadOnly Property actType As eActType
        Get
            Return eActType.send
        End Get
    End Property

    <Browsable(False)>
    Public Overrides ReadOnly Property Description As String
        Get
            Return String.Format("PUT \{0}\{1}", Me.dir, Me.filespec)
        End Get
    End Property

End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
 System.SerializableAttribute(),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
Partial Public Class ftpconfigServer
    Implements IDisposable

    Private hostNameField As String

    Private protocolField As eProtocol

    Private transferModeField As WinSCP.TransferMode

    Private userNameField As String

    Private passwordField As String

    Private sshHostKeyFingerprintField As String

    Private nameField As String

    Private PortField As Integer = -1

#Region "CTOR"

    Sub New(HostName As String, FriendlyName As String)
        With Me
            .HostName = HostName
            .name = FriendlyName
            .UserName = "myUsername"
            .Password = "123456"
            .Protocol = eProtocol.ftp
            .TransferMode = WinSCP.TransferMode.Automatic
            .SshHostKeyFingerprint = " "
            .Port = 21

        End With

    End Sub

    Sub New()

    End Sub

#End Region

    '''<remarks/>
    <DisplayName("Hostname or IP address"),
    Description("The address of the remote file service."),
    Category("Server")>
    Public Property HostName() As String
        Get
            Return Me.hostNameField
        End Get
        Set
            Me.hostNameField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Service Protocol"),
    Description("The protocol used by the host to send/receive files."),
    Category("Server")>
    Public Property Protocol() As eProtocol
        Get
            Return Me.protocolField
        End Get
        Set
            Me.protocolField = Value
        End Set
    End Property

    '''<remarks/>  
    <DisplayName("Port Number"),
    Description("The TCP/IP port number of the file server."),
    Category("Server")>
    Public Property Port As Integer
        Get
            Return PortField
        End Get
        Set(value As Integer)
            PortField = value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Transfer Mode"),
    Description("Select ASCII or binary transfer as required, or leave automatic."),
    Category("Server")>
    Public Property TransferMode() As WinSCP.TransferMode
        Get
            Return Me.transferModeField
        End Get
        Set
            Me.transferModeField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("User name"),
    Description("The user credentials for connecting to the file server."),
    Category("Security")>
    Public Property UserName() As String
        Get
            Return Me.userNameField
        End Get
        Set
            Me.userNameField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("Password"),
    Description("The password credentials for connecting to the file server."),
    Category("Security"),
    PasswordPropertyText(True)>
    Public Property Password() As String
        Get
            Return Me.passwordField
        End Get
        Set
            Me.passwordField = Value
        End Set
    End Property

    '''<remarks/>
    <DisplayName("SSH Host Key"),
    Description("The SSH key allows encryption for secure FTP connections."),
    Category("Security")>
    Public Property SshHostKeyFingerprint() As String
        Get
            Return Me.sshHostKeyFingerprintField
        End Get
        Set
            Me.sshHostKeyFingerprintField = Value
        End Set
    End Property

    '''<remarks/>
    <System.Xml.Serialization.XmlAttributeAttribute()>
    <DisplayName("Friendly Name"),
    Description("The name of this server configuration."),
    Category("General"),
    [ReadOnly](True)>
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = Value
        End Set
    End Property

#Region "IDisposable Support"

    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        Dispose(True)
        ' TODO: uncomment the following line if Finalize() is overridden above.
        ' GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class
